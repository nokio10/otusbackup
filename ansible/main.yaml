- hosts: all
  become: true
  tasks:

#Подключить EPEL репозиторий с дополнительными пакетами
  - name: install epel
    yum:
      name: epel-release
      state: present

#Устанавливить на client и backup сервере borgbackup
  - name: install borgbackup
    yum:
      name: borgbackup
      state: present      


- hosts: backup
  become: true
  tasks:
#На сервере backup создать пользователя borg
  - name: Add users
    user:
      name: "borg"
      shell: /bin/bash
      state: present
      password_lock: no

#Создать каталог /var/backup и назначаем на него права пользователя borg
  - name: mkdir 
    file:
      path: /var/backup
      state: directory
      owner: borg
      group: borg
      mode: '0777'


- hosts: client
  become: true
  tasks:
#Отправляет приватный ключ на клиент
  - name: mkdir
    file:
      path: /root/.ssh
      state: directory
      owner: root
      group: root
      mode: '0755'

  - name: Register ssh key
    copy:
      src: id_rsa
      dest: /root/.ssh/id_rsa
      owner: root
      group: root
      mode: '0600'

  - name: Install pip
    yum:
      name: 
        - python-pip
        - python-setuptools
      state: present

  - name: Install pexpec
    pip:
      name: pexpect
        

- hosts: backup
  become: true
  tasks:
#Добавляет ssh ключ на сервер backup в файл authorized_keys
  - name: mkdir
    file:
      path: /home/borg/.ssh
      state: directory
      owner: borg
      group: borg
      mode: '0755'

  - name: Register ssh key
    copy:
      src: id_rsa.pub
      dest: /home/borg/.ssh/authorized_keys
      owner: borg
      group: borg
      mode: '0600'

  - name: mkfs
    shell: yes | mkfs.ext4 /dev/sdb

  - name: Mount 
    shell: mount /dev/sdb /var/backup

  - name: mkdir
    file:
      path: /var/backup
      state: directory
      owner: borg
      group: borg
      mode: '0777'

  - name: rm
    shell: rm -r /var/backup/lost+found


- hosts: client
  become: true
  vars:
    server_address: 192.168.56.15
  tasks:
#Инициализирует репозиторий borg на backup сервере с client сервера
  - name: Init borg
    expect: 
      command: borg init --encryption=repokey borg@{{ server_address }}:/var/backup/
      responses: 
        'Are you sure you want to continue connecting .*': "yes"
        '.*Enter new .*': "Otus1234"
        '.*Enter same .*': "Otus1234"
        '.* verification\? .*': "y"
#Запускаем для проверки создания бэкапа
  - name: test run
    expect: 
      command: borg create --stats --list borg@{{ server_address }}:/var/backup/::"etc-{now:%Y-%m-%d_%H:%M:%S}" /etc   
      responses:
        (?i)ssh://borg@192.168.56.15/var/backup: "Otus1234"
#Показывает, что получилось
  - name: Result
    expect:
      command: borg list borg@{{ server_address }}:/var/backup/
      responses:
        (?i)ssh://borg@192.168.56.15/var/backup: "Otus1234"
    register: list

  - name: set_fact
    set_fact:
      backup: "{{ list.stdout_lines[1] | regex_search('etc\\-[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}\\_[0-9]{2}:[0-9]{2}:[0-9]{2}') }}"  

  - name: debug
    debug:
      msg: "{{ backup }}"
#Достает файл из бэкапа
  - name: Extract 
    expect: 
      command: "borg extract borg@{{ server_address }}:/var/backup/::{{ backup }} etc/hostname"
      responses:
        ssh://borg@192.168.56.15/var/backup: "Otus1234"  
#Создает сервис
  - name: load borg-backup.service
    copy:
      src: "borg-backup.service"
      dest: /etc/systemd/system/borg-backup.service
      owner: root
      group: root
      mode: '0644'

#Создает таймер 
  - name: load borg-backup.timer
    copy:
      src: "borg-backup.timer"
      dest:  /etc/systemd/system/borg-backup.timer
      owner: root
      group: root
      mode: '0644'

  - name: start borg-backup.timer
    systemd:
      name: borg-backup.timer
      enabled: yes
      state: started
